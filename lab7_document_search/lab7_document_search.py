# %% [markdown]
# # üîç –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ7: –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å ReAct –∞–≥–µ–Ω—Ç–æ–º –≤ LangGraph
# 
# ## üìö –í–≤–µ–¥–µ–Ω–∏–µ
# 
# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É, –ø–æ—Å–≤—è—â–µ–Ω–Ω—É—é —Å–æ–∑–¥–∞–Ω–∏—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã! 
# –í —ç—Ç–æ–π —Ä–∞–±–æ—Ç–µ –º—ã –æ–±—ä–µ–¥–∏–Ω–∏–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ LanceDB —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π ReAct (Reasoning and Action) 
# –≤ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ LangGraph –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞, —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã, —Ä–∞—Å—Å—É–∂–¥–∞—Ç—å –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å 
# —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
# 
# **–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?** –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ –≤—Å–µ–≥–¥–∞ —Å–ø–æ—Å–æ–±–µ–Ω –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
# –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ ReAct –º–æ–≥—É—Ç:
# * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–±–∏—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞
# * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# * –î–∞–≤–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
# 
# –í —ç—Ç–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
# * **LanceDB** - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
# * **LangGraph** - —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
# * **ReAct** - –ø–æ–¥—Ö–æ–¥, —Å–æ—á–µ—Ç–∞—é—â–∏–π —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è (reasoning) –∏ –¥–µ–π—Å—Ç–≤–∏—è (action)
# 
# ## üéØ –ß–µ–º—É –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å:
# 
# 1. **üß© –†–∞–±–æ—Ç–∞ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö** - –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫
# 2. **üîÑ –°–æ–∑–¥–∞–Ω–∏–µ ReAct –∞–≥–µ–Ω—Ç–∞** - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
# 3. **üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ LangGraph** - –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º
# 4. **üöÄ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞** - —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ 
# 5. **üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è** - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
# 
# –ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!

# %% [markdown]
# ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫

# %%
# –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(".env")

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ LangChain
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.output_parsers import StrOutputParser
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage, BaseMessage, ToolMessage
from langchain_openai import ChatOpenAI

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
from langchain_community.vectorstores import LanceDB
from langchain_openai import OpenAIEmbeddings

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ LangGraph
from langgraph.graph import StateGraph, START
from langgraph.graph.message import add_messages
from typing import Annotated, Sequence, TypedDict, List, Dict, Any

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è ReAct –∞–≥–µ–Ω—Ç–∞
from langchain_core.tools import Tool

# %% [markdown]
# ## 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# 
# **üí° –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ**: –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç
# –∏—Å–∫–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –Ω–æ –∏ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –±–ª–∏–∑–æ—Å—Ç–∏.
# 
# –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LanceDB –∏–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Ññ4, –≥–¥–µ —É–∂–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã –¢-–ë–∞–Ω–∫–∞.
# 
# **üîç –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã**:
# * –ü–æ–¥–∫–ª—é—á–∏–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö LanceDB
# * –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# * –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–∏—Å–∫–∞

# %%
def connect_to_lancedb(db_path="../lab4_pdf_pipeline/data/lancedb", table_name="pdf_docs"):
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö LanceDB.
    
    Args:
        db_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö LanceDB
        table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä LanceDB –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    """
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö LanceDB –ø–æ –ø—É—Ç–∏: {db_path}")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å lancedb
        import lancedb
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = lancedb.connect(db_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        table_names = db.table_names()
        
        if not table_names:
            print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü. –ü—É—Ç—å: {db_path}")
            return None
        
        if table_name not in table_names:
            print(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {table_names}")
            return None
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = db.open_table(table_name)
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ
        print(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ: {table_name}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {table.count_rows()}")

        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        embeddings = OpenAIEmbeddings()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä LanceDB –¥–ª—è LangChain
        vector_store = LanceDB(
            connection=db,
            table_name=table_name,
            embedding=embeddings
        )
        
        return vector_store
    except ImportError:
        print("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ lancedb. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

# %%
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
vector_db = connect_to_lancedb()

# %% [markdown]
# ## 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
# 
# **üí° –ö–ª—é—á–µ–≤–æ–π –∫–æ–Ω—Ü–µ–ø—Ç**: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (tools) –≤ ReAct –ø–æ–∑–≤–æ–ª—è—é—Ç –∞–≥–µ–Ω—Ç—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
# –•–æ—Ä–æ—à–æ –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–µ–ª–∞—é—Ç –∞–≥–µ–Ω—Ç–∞ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º.
# 
# **üîç –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã**:
# * –†–∞–∑—Ä–∞–±–æ—Ç–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
# * –°–æ–∑–¥–∞–¥–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
# * –î–æ–±–∞–≤–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

# %%
# 
def raw_search_documents(query, vector_store=None, k=3):
    """
    –ß–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ LangChain.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–æ–º vector_store –∏ —Å–∏—Å—Ç–µ–º–æ–π –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.
    
    Args:
        query (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
        vector_store: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ LanceDB –¥–ª—è –ø–æ–∏—Å–∫–∞ (LanceDB)
        k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ LangChain API - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–∞–º
        results = vector_store.similarity_search(query, k=k)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        output = f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∞–π–¥–µ–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n'
        
        for i, doc in enumerate(results):
            output += f"–î–æ–∫—É–º–µ–Ω—Ç {i+1}:\n"
            output += f"{doc.page_content}\n\n"
            if hasattr(doc, 'metadata') and doc.metadata:
                output += f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {doc.metadata}\n\n"
        
        return output
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}"

def raw_search_with_filter(query, metadata_filter, vector_store=None, k=3):
    """
    –ß–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º.
    –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ LangChain.
    
    Args:
        query (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
        metadata_filter (dict): –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        vector_store: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ LanceDB –¥–ª—è –ø–æ–∏—Å–∫–∞
        k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        results = vector_store.similarity_search(
            query=query, 
            k=k,
            filter=metadata_filter
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        output = f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {metadata_filter} –Ω–∞–π–¥–µ–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n'
        
        for i, doc in enumerate(results):
            output += f"–î–æ–∫—É–º–µ–Ω—Ç {i+1}:\n"
            output += f"{doc.page_content}\n\n"
            if hasattr(doc, 'metadata') and doc.metadata:
                output += f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {doc.metadata}\n\n"
        
        return output
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: {str(e)}"

def raw_analyze_documents(documents):
    """
    –ß–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ —Å–≤—è–∑–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ LangChain.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    
    Args:
        documents (str): –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    Returns:
        str: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    prompt = ChatPromptTemplate.from_messages([
        ("system", """–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. 
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≤—ã–¥–µ–ª–∏—Ç–µ:
        1. –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ç—ã
        2. –í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ —Ü–∏—Ñ—Ä—ã
        3. –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
        
        –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∞–Ω–∞–ª–∏–∑ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""),
        ("user", "{documents}")
    ])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å GPT-4o-mini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    model = ChatOpenAI(model="gpt-4o-mini", temperature=0)
    chain = prompt | model | StrOutputParser()
    
    return chain.invoke({"documents": documents})

# %% [markdown]
# ## 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ReAct –∞–≥–µ–Ω—Ç–∞
# 
# **üí° –ö–ª—é—á–µ–≤–æ–π –∫–æ–Ω—Ü–µ–ø—Ç**: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –≤ LangGraph —Ö—Ä–∞–Ω–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
# –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π. –î–ª—è ReAct –∞–≥–µ–Ω—Ç–∞ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏
# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.
# 
# **üîç –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã**:
# * –û–ø—Ä–µ–¥–µ–ª–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
# * –°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

# %%
class SearchAgentState(TypedDict):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ReAct.
    """
    # –°–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º reducer add_messages –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
    messages: Annotated[Sequence[BaseMessage], add_messages]
    # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    status: str
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞
    search_results: List[str]
    # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    search_history: List[str]

def create_empty_state() -> SearchAgentState:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞.
    """
    return {
        "messages": [],
        "status": "waiting_for_query",
        "search_results": [],
        "search_history": []
    }

# %% [markdown]
# ## 4. –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∞ ReAct
# 
# **üí° –ö–ª—é—á–µ–≤–æ–π –∫–æ–Ω—Ü–µ–ø—Ç**: ReAct —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π (reasoning) –∏ –¥–µ–π—Å—Ç–≤–∏–π (actions). –í LangGraph
# —ç—Ç–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É–∑–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.
# 
# **üîç –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã**:
# * –°–æ–∑–¥–∞–¥–∏–º —É–∑–µ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
# * –†–µ–∞–ª–∏–∑—É–µ–º —É–∑–µ–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
# * –î–æ–±–∞–≤–∏–º —É–∑–µ–ª –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

# %%
def create_search_agent_nodes(vector_store):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ReAct.
    
    Args:
        vector_store: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —É–∑–ª–∞–º–∏ –≥—Ä–∞—Ñ–∞
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    model = ChatOpenAI(model="gpt-4o-mini", temperature=0.2)
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∏—Å—Ç—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø–æ–∏—Å–∫–∞
    def _search_func(query_str):
        """–ü—Ä—è–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±–µ–∑ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        return raw_search_documents(query_str, vector_store)
    
    def _filter_search_func(args_str):
        """–ü—Ä—è–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –±–µ–∑ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        import json
        try:
            args = json.loads(args_str)
            query = args.get("query", "")
            metadata_filter = args.get("metadata_filter", {})
            return raw_search_with_filter(query, metadata_filter, vector_store)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {str(e)}"
    
    def _analyze_func(docs):
        """–ü—Ä—è–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        return raw_analyze_documents(docs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
    search_tool = Tool(
        name="search_documents",
        description="–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É",
        func=_search_func
    )
    
    filtered_search_tool = Tool(
        name="search_with_filter",
        description="–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º",
        func=_filter_search_func
    )
    
    analyze_tool = Tool(
        name="analyze_documents",
        description="–ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        func=_analyze_func
    )
    
    # –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
    tools = [
        search_tool,
        filtered_search_tool,
        analyze_tool
    ]
    
    # –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    model_with_tools = model.bind_tools(tools)
    
    # –£–∑–µ–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    def execute_search(state: SearchAgentState) -> SearchAgentState:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = [msg for msg in state["messages"] if isinstance(msg, HumanMessage)]
        if not user_messages:
            return state  # –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        query = user_messages[-1].content
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥–∞ –∫ –ø–æ–∏—Å–∫—É
        system_message = SystemMessage(content="""
        –í—ã - –ø–æ–∏—Å–∫–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.
        
        –£ –≤–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
        1. search_documents - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        2. search_with_filter - –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–∞—Ç–µ, –∞–≤—Ç–æ—Ä—É)
        
        –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.
        –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ search_with_filter.
        –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ search_documents.
        """)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏
        messages = [
            system_message,
            HumanMessage(content=f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}. –ö–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?")
        ]
        
        # –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        response = model_with_tools.invoke(messages)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        search_results = []
        search_tool_used = False
        updated_messages = state["messages"] + [response]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if hasattr(response, "tool_calls") and response.tool_calls:
            for tool_call in response.tool_calls:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∑–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                tool_name = None
                tool_args = {}
                tool_call_id = None
                
                # –î–ª—è dict (–Ω–æ–≤—ã–π API)
                if isinstance(tool_call, dict):
                    if 'name' in tool_call:
                        tool_name = tool_call['name']
                    if 'arguments' in tool_call:
                        tool_args = tool_call['arguments']
                    if 'id' in tool_call:
                        tool_call_id = tool_call['id']
                # –î–ª—è –æ–±—ä–µ–∫—Ç–∞ (—Å—Ç–∞—Ä—ã–π API)
                elif hasattr(tool_call, "name"):
                    tool_name = tool_call.name
                    if hasattr(tool_call, "args"):
                        tool_args = tool_call.args
                    if hasattr(tool_call, "id"):
                        tool_call_id = tool_call.id
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                if tool_name in ["search_documents", "search_with_filter"]:
                    search_tool_used = True
                    tool_result = None
                    
                    # –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ search_documents
                    if tool_name == "search_documents":
                        search_query = query
                        if isinstance(tool_args, dict) and 'query' in tool_args:
                            search_query = tool_args['query']
                        elif isinstance(tool_args, str):
                            import json
                            try:
                                args_dict = json.loads(tool_args)
                                search_query = args_dict.get('query', query)
                            except:
                                search_query = query
                        
                        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
                        tool_result = _search_func(search_query)
                        
                    # –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ search_with_filter
                    elif tool_name == "search_with_filter":
                        metadata_filter = {}
                        search_query = query
                        
                        if isinstance(tool_args, dict):
                            if 'query' in tool_args:
                                search_query = tool_args['query']
                            if 'metadata_filter' in tool_args:
                                metadata_filter = tool_args['metadata_filter']
                        elif isinstance(tool_args, str):
                            import json
                            try:
                                args_dict = json.loads(tool_args)
                                search_query = args_dict.get('query', query)
                                metadata_filter = args_dict.get('metadata_filter', {})
                            except:
                                pass
                        
                        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è filtered_search_tool
                        args_str = json.dumps({"query": search_query, "metadata_filter": metadata_filter})
                        tool_result = _filter_search_func(args_str)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    if tool_result:
                        search_results.append(tool_result)
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                        tool_message = ToolMessage(
                            content=tool_result,
                            tool_call_id=tool_call_id
                        )
                        updated_messages.append(tool_message)
        
        # –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤—Ä—É—á–Ω—É—é
        if not search_tool_used:
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
            result = _search_func(query)
            search_results.append(result)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–æ–≤
        updated_history = state["search_history"] + [query]
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return {
            "messages": updated_messages,
            "status": "search_executed",
            "search_results": search_results,
            "search_history": updated_history
        }
        
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–∑–µ–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ —É–∑–µ–ª —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞
    def analyze_query(state: SearchAgentState) -> SearchAgentState:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞."""
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        system_message = SystemMessage(content="""
        –í—ã - –ø–æ–∏—Å–∫–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π ReAct (Reasoning and Action) –ø–æ–¥—Ö–æ–¥.
        
        –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞:
        1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∏–ª–∏ –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.
        2. –í—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.
        3. –û—Ü–µ–Ω–∏—Ç—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.
        
        –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∏ –ø–ª–∞–Ω –ø–æ–∏—Å–∫–∞.
        """)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = [system_message] + state["messages"]
        
        # –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        response = model.invoke(messages)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return {
            "messages": state["messages"] + [response],
            "status": "query_analyzed",
            "search_results": state["search_results"],
            "search_history": state["search_history"]
        }
    
    def generate_response(state: SearchAgentState) -> SearchAgentState:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
        if not state["search_results"]:
            response = AIMessage(content="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ.")
            return {
                "messages": state["messages"] + [response],
                "status": "completed",
                "search_results": state["search_results"],
                "search_history": state["search_history"]
            }
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        system_message = SystemMessage(content="""
        –í—ã - –ø–æ–∏—Å–∫–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –∏ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
        1. –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        2. –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        3. –£–∫–∞–∑–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
        
        –û—Å–Ω–æ–≤—ã–≤–∞–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞.
        –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á–µ—Å—Ç–Ω–æ —É–∫–∞–∂–∏—Ç–µ –Ω–∞ —ç—Ç–æ.
        """)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        search_context = "\n\n".join(state["search_results"])
        search_context_message = SystemMessage(content=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n{search_context}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = [msg for msg in state["messages"] if isinstance(msg, HumanMessage)]
        last_user_message = user_messages[-1] if user_messages else None
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if not last_user_message:
            return state
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        query_for_response = f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {last_user_message.content}. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
        messages = [
            system_message,
            search_context_message,
            HumanMessage(content=query_for_response)
        ]
        
        # –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        response = model.invoke(messages)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return {
            "messages": state["messages"] + [response],
            "status": "completed",
            "search_results": state["search_results"],
            "search_history": state["search_history"]
        }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —É–∑–ª–∞–º–∏
    return {
        "analyze_query": analyze_query,
        "execute_search": execute_search,
        "generate_response": generate_response
    }

# %% [markdown]
# ## 5. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ ReAct –∞–≥–µ–Ω—Ç–∞
# 
# **üí° –ö–ª—é—á–µ–≤–æ–π –∫–æ–Ω—Ü–µ–ø—Ç**: –ì—Ä–∞—Ñ –≤ LangGraph –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ —É–∑–ª—ã —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π –∏ –∫–∞–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã 
# –≤–æ–∑–º–æ–∂–Ω—ã –º–µ–∂–¥—É –Ω–∏–º–∏. –î–ª—è ReAct –∞–≥–µ–Ω—Ç–∞ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –≥—Ä–∞—Ñ —Å —É—Å–ª–æ–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç
# –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.
# 
# **üîç –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã**:
# * –°–æ–∑–¥–∞–¥–∏–º –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞
# * –û–ø—Ä–µ–¥–µ–ª–∏–º —É—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
# * –°–∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≥—Ä–∞—Ñ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

# %%
def create_search_agent_graph(vector_store):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ ReAct –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
    
    Args:
        vector_store: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    workflow = StateGraph(SearchAgentState)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–æ–≤
    nodes = create_search_agent_nodes(vector_store)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ
    for name, function in nodes.items():
        workflow.add_node(name, function)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    def should_search(state: SearchAgentState) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."""
        if state["status"] == "query_analyzed":
            return "execute_search"
        else:
            return "generate_response"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ—Ä —Å —É—Å–ª–æ–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
    workflow.add_edge(START, "analyze_query")
    workflow.add_conditional_edges("analyze_query", should_search)
    workflow.add_edge("execute_search", "generate_response")
    
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≥—Ä–∞—Ñ–∞
    graph = workflow.compile()
    
    return graph

# %% [markdown]
# ## 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã ReAct –∞–≥–µ–Ω—Ç–∞
# 
# **üí° –ö–ª—é—á–µ–≤–æ–π –∫–æ–Ω—Ü–µ–ø—Ç**: –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã —Å–æ–∑–¥–∞–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –ø–æ—Ä–∞ —É–≤–∏–¥–µ—Ç—å –Ω–∞—à–µ–≥–æ 
# –∞–≥–µ–Ω—Ç–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ –æ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã.
# 
# **üîç –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã**:
# * –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
# * –û—Ç—Å–ª–µ–¥–∏–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –≤—Å–µ —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
# * –û—Ü–µ–Ω–∏–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∏—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å

# %%
def demonstrate_search_agent(vector_store=None):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ReAct.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: –∞–Ω–∞–ª–∏–∑, –ø–æ–∏—Å–∫ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞.
    
    Args:
        vector_store: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
    
    Returns:
        dict: –ö–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –¥–ª—è ReAct –∞–≥–µ–Ω—Ç–∞
    graph = create_search_agent_graph(vector_store)
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = create_empty_state()
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞
    test_queries = [
        "–ö–∞–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¢-–ë–∞–Ω–∫?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è",
        "–ö–∞–∫–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤?"
    ]
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    for i, query in enumerate(test_queries):
        print(f"\n{'='*50}")
        print(f"–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø {i+1}: {query}")
        print(f"{'='*50}\n")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state["messages"].append(HumanMessage(content=query))
        
        # –í—ã–∑–æ–≤ –≥—Ä–∞—Ñ–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        state = graph.invoke(state)
        
        # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ai_messages = [msg for msg in state["messages"] if isinstance(msg, AIMessage)]
        last_message = ai_messages[-1] if ai_messages else None
        
        if last_message:
            print(f"üìù –û–¢–í–ï–¢ –ê–ì–ï–ù–¢–ê:\n{last_message.content}")
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {state['status']}")
        print(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(state['search_results'])}")
        print(f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∏—Å–∫–æ–≤: {len(state['search_history'])}")
        print(f"{'='*50}\n")
    
    return state

# %% [markdown]
# ## 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
# 
# **üí° –ö–ª—é—á–µ–≤–æ–π –∫–æ–Ω—Ü–µ–ø—Ç**: –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞–º –Ω—É–∂–Ω–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
# —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. LangGraph –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç checkpointing, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç
# —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞.
# 
# **üîç –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã**:
# * –î–æ–±–∞–≤–∏–º –º–µ—Ö–∞–Ω–∏–∑–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MemorySaver
# * –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º, –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
# * –†–µ–∞–ª–∏–∑—É–µ–º –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º thread_id

# %%
def demonstrate_persistence():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç–µ—Ä–æ–≤ –≤ LangGraph.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏.
    """
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å —á–µ–∫–ø–æ–∏–Ω—Ç–µ—Ä–∞–º–∏ ===\n")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
    from langgraph.checkpoint.memory import MemorySaver
    
    # –û–ø—Ä–µ–¥–µ–ª–∏–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    def simple_processor(state: SearchAgentState) -> SearchAgentState:
        """–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º."""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = [msg for msg in state["messages"] if isinstance(msg, HumanMessage)]
        if not user_messages:
            return state
            
        last_message = user_messages[-1].content
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        response = AIMessage(content=f"–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{last_message}'. –û–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        updated_history = state["search_history"] + [last_message]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return {
            "messages": state["messages"] + [response],
            "status": "completed",
            "search_results": state["search_results"],
            "search_history": updated_history
        }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    workflow = StateGraph(SearchAgentState)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –≤ –≥—Ä–∞—Ñ
    workflow.add_node("process_message", simple_processor)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–æ –æ—Ç –Ω–∞—á–∞–ª–∞ –∫ —É–∑–ª—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    workflow.add_edge(START, "process_message")
    
    # –°–æ–∑–¥–∞–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç–µ—Ä –≤ –ø–∞–º—è—Ç–∏
    memory_saver = MemorySaver()
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≥—Ä–∞—Ñ —Å —á–µ–∫–ø–æ–∏–Ω—Ç–µ—Ä–æ–º
    graph = workflow.compile(checkpointer=memory_saver)
    
    print("1Ô∏è‚É£ –°–æ–∑–¥–∞–ª–∏ –≥—Ä–∞—Ñ —Å —á–µ–∫–ø–æ–∏–Ω—Ç–µ—Ä–æ–º MemorySaver")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = create_empty_state()
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å–µ—Å—Å–∏–∏
    session_id = "demo_session_1"
    config = {"configurable": {"thread_id": session_id}}
    
    print("\n2Ô∏è‚É£ –ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message1 = "–≠—Ç–æ –º–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏"
    state["messages"].append(HumanMessage(content=message1))
    
    # –í—ã–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message1}")
    state = graph.invoke(state, config=config)
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
    ai_messages = [msg for msg in state["messages"] if isinstance(msg, AIMessage)]
    last_message = ai_messages[-1] if ai_messages else None
    
    if last_message:
        print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {last_message.content}")
    
    print(f"üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {state['search_history']}")
    
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —á–µ–∫–ø–æ–∏–Ω—Ç–µ—Ä–∞
    state_snapshot = graph.get_state(config)
    
    if state_snapshot:
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(state_snapshot.values['messages'])}")
        print(f"üîç –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {state_snapshot.values['search_history']}")
    
    print("\n4Ô∏è‚É£ –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    restored_state = state_snapshot.values if state_snapshot else create_empty_state()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    message2 = "–≠—Ç–æ –º–æ–µ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–º–Ω–∏—à—å –ª–∏ —Ç—ã –ø–µ—Ä–≤–æ–µ?"
    restored_state["messages"].append(HumanMessage(content=message2))
    
    # –í—ã–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ —Å —Ç–µ–º –∂–µ thread_id
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message2}")
    updated_state = graph.invoke(restored_state, config=config)
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
    ai_messages = [msg for msg in updated_state["messages"] if isinstance(msg, AIMessage)]
    last_message = ai_messages[-1] if ai_messages else None
    
    if last_message:
        print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {last_message.content}")
    
    print(f"üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {updated_state['search_history']}")
    
    print("\n5Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —á–µ–∫–ø–æ–∏–Ω—Ç–µ—Ä–∞
    final_snapshot = graph.get_state(config)
    
    if final_snapshot:
        print("‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(final_snapshot.values['messages'])}")
        
        # –í—ã–≤–æ–¥–∏–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        print("\nüìú –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:")
        for i, msg in enumerate(final_snapshot.values["messages"]):
            if isinstance(msg, HumanMessage):
                print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({i+1}): {msg.content}")
            elif isinstance(msg, AIMessage):
                print(f"   ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç ({i+1}): {msg.content}")
    
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
    
    return memory_saver

# %% [markdown]
# ## 8. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# 
# **üí° –ö–ª—é—á–µ–≤–æ–π –∫–æ–Ω—Ü–µ–ø—Ç**: –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. LangGraph –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö thread_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# 
# **üîç –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã**:
# * –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º, –∫–∞–∫ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
# * –†–µ–∞–ª–∏–∑—É–µ–º –∏–∑–æ–ª—è—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

# %%
def demonstrate_multi_user_support(vector_store=None):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    
    Args:
        vector_store: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
    """
    from langgraph.checkpoint.memory import MemorySaver
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
    workflow = StateGraph(SearchAgentState)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–æ–≤
    nodes = create_search_agent_nodes(vector_store)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤
    for name, function in nodes.items():
        workflow.add_node(name, function)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    def should_search(state: SearchAgentState) -> str:
        if state["status"] == "query_analyzed":
            return "execute_search"
        else:
            return "generate_response"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ—Ä
    workflow.add_edge(START, "analyze_query")
    workflow.add_conditional_edges("analyze_query", should_search)
    workflow.add_edge("execute_search", "generate_response")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–ø–æ–∏–Ω—Ç–µ—Ä–∞
    memory_saver = MemorySaver()
    
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≥—Ä–∞—Ñ–∞ —Å —á–µ–∫–ø–æ–∏–Ω—Ç–µ—Ä–æ–º
    graph = workflow.compile(checkpointer=memory_saver)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = ["user_1", "user_2"]
    user_states = {}
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in user_ids:
        user_states[user_id] = create_empty_state()
    
    # –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_queries = {
        "user_1": [
            "–ö–∞–∫–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¢-–ë–∞–Ω–∫?",
            "–ê –∫–∞–∫–∏–µ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞?"
        ],
        "user_2": [
            "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç –æ–Ω–ª–∞–π–Ω?",
            "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –∏–ø–æ—Ç–µ–∫–∏?"
        ]
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_id in user_ids:
        print(f"\n=== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ===\n")
        
        config = {"configurable": {"thread_id": user_id}}
        state = user_states[user_id]
        
        for query in user_queries[user_id]:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state["messages"].append(HumanMessage(content=query))
            
            # –í—ã–∑–æ–≤ –≥—Ä–∞—Ñ–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º thread_id
            state = graph.invoke(state, config=config)
            
            # –í—ã–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
            print(f"–ó–∞–ø—Ä–æ—Å: {query}")
            
            ai_messages = [msg for msg in state["messages"] if isinstance(msg, AIMessage)]
            last_message = ai_messages[-1] if ai_messages else None
            
            if last_message:
                print(f"–û—Ç–≤–µ—Ç: {last_message.content}\n")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states[user_id] = state
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ===\n")
    
    for user_id in user_ids:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        config = {"configurable": {"thread_id": user_id}}
        state_snapshot = graph.get_state(config)
        
        if state_snapshot:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(state_snapshot.values['messages'])}")
            print(f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {state_snapshot.values['search_history']}")
            print()
    
    return memory_saver

# %% [markdown]
# ## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
# 
# **üéì –ß—Ç–æ –≤—ã —É–∑–Ω–∞–ª–∏ –≤ —ç—Ç–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏**:
# 
# 1. **üß© –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö** - –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LanceDB –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
# 2. **üîÑ –ü—Ä–∏–Ω—Ü–∏–ø—ã –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ReAct** - –∫–∞–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
# 3. **üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –≤ LangGraph** - –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —É–∑–ª—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –≤ –≥—Ä–∞—Ñ–µ
# 4. **üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è** - –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# 

# %%
# –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
if __name__ == "__main__":
    import lancedb
    import os
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "../lab4_pdf_pipeline/data/lancedb"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å –∫ –ë–î
    if not os.path.exists(db_path):
        print(f"–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_path}")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        vector_db = None
    else:
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            vector_db = connect_to_lancedb(db_path=db_path, table_name="pdf_docs")
            print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
            vector_db = None
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    print("\n=== –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ ===\n")
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        demonstrate_search_agent(vector_db)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {str(e)}")
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        memory_saver = demonstrate_persistence()
        print("\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {str(e)}")

    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        demonstrate_multi_user_support(vector_db)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {str(e)}")
    
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ===\n")

# –£–∑–µ–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª—å—é
def create_tool_node(model_with_tools):
    """–°–æ–∑–¥–∞–µ—Ç —É–∑–µ–ª –≥—Ä–∞—Ñ–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    def tool_node(state: SearchAgentState) -> SearchAgentState:
        """–£–∑–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (tools)."""
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        system_message = SystemMessage(content="""
        –í—ã - –ø–æ–∏—Å–∫–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. 
        
        –ò—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
        1. search_documents - –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        2. search_with_filter - –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        3. analyze_documents - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        
        –í—ã–∑—ã–≤–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—é)
        messages = [system_message] + state["messages"]
        
        # –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        response = model_with_tools.invoke(messages)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        search_results = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        if hasattr(response, "tool_calls") and response.tool_calls:
            for tool_call in response.tool_calls:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ tool_call —Å–ª–æ–≤–∞—Ä–µ–º (–Ω–æ–≤—ã–π API) –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º (—Å—Ç–∞—Ä—ã–π API)
                if isinstance(tool_call, dict):
                    # –ù–æ–≤—ã–π API - tool_call —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                    if 'output' in tool_call:
                        search_results.append(tool_call['output'])
                else:
                    # –°—Ç–∞—Ä—ã–π API - tool_call —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                    if hasattr(tool_call, "output"):
                        search_results.append(tool_call.output)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return {
            "messages": state["messages"] + [response],
            "status": "tool_used" if search_results else "no_tool_used",
            "search_results": search_results if search_results else state["search_results"],
            "search_history": state["search_history"]
        }
    
    return tool_node
